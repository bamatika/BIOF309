import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Retrieve '.csv' files containing electrophysiology data in TBS and Cocaine conditions.
LFP_data_TBS = pd.read_csv('C:\\Users\\BAMA\\Desktop\\Excel_Practice.csv')
LFP_data_COC = pd.read_csv('C:\\Users\\BAMA\\Desktop\\Excel_practice_Cocaine.csv')

# Plot a boxplot for the data to observe data points in 4 distributions: PreTBS, PostTBS, PreCOC, PostCOC
data1 = LFP_data_TBS['PRE'].values.reshape(-1, 1)
data2 = LFP_data_TBS['POST'].values.reshape(-1, 1)
data3 = LFP_data_COC['PRE'].values.reshape(-1, 1)
data4 = LFP_data_COC['POST'].values.reshape(-1, 1)
data = [data1, data2, data3, data4]
plt.boxplot(data)
plt.xticks([1, 2, 3, 4], ['PreTBS', 'PostTBS', 'PreCOC', 'PostCOC'])
plt.ylabel('LFP magnitude (mV)')
plt.xlabel('Plasticity protocol')
plt.show()

# Calculate mean and standard deviation for preTBS, postTBS, preCocaine and postCocaine and 
LFP_data_TBS['MeanPre'] = LFP_data_TBS['PRE'].mean()
LFP_data_TBS['StDevPre'] = LFP_data_TBS['PRE'].std()
LFP_data_TBS['MeanPost'] = LFP_data_TBS['POST'].mean()
LFP_data_TBS['StDevPost'] = LFP_data_TBS['POST'].std()
LFP_data_COC['MeanPre'] = LFP_data_COC['PRE'].mean()
LFP_data_COC['StDevPre'] = LFP_data_COC['PRE'].std()
LFP_data_COC['MeanPost'] = LFP_data_COC['POST'].mean()
LFP_data_COC['StDevPost'] = LFP_data_COC['POST'].std()


# Write a function to detect 3 standard deviation (SD) outliers from 'PRE' column of a DataFrame
def remove_outliers_fromPRE(row): 
    Pre = row['PRE']
    if Pre < (row['MeanPre'] - (3 * row['StDevPre'])) or Pre > (row['MeanPre'] + (3 * row['StDevPre'])):
        return NaN
    else:
        return Pre

# Write a function to detect 3 standard deviation (SD) outliers from 'POST' column of a DataFrame
def remove_outliers_fromPOST(row):
    Post = row['POST']
    if Post < (row['MeanPost'] - (3 * row['StDevPost'])) or Post > (row['MeanPost'] + (3* row['StDevPost'])):
        return NaN
    else:
        return Post

# Apply a function to TBS and Cocaine dataframe create columns 'cPRE' and 'cPOST' with NaN Value instead of outliers of 'PRE' and 'POST'
LFP_data_TBS['cPRE'] = LFP_data_TBS.apply(remove_outliers_fromPRE,  axis = 1)
LFP_data_COC['cPRE'] = LFP_data_COC.apply(remove_outliers_fromPRE, axis = 1)
LFP_data_TBS['cPOST'] = LFP_data_TBS.apply(remove_outliers_fromPOST, axis = 1)
LFP_data_COC['cPOST'] = LFP_data_COC.apply(remove_outliers_fromPOST, axis = 1)

#print(LFP_data_TBS.tail(10))
#print(LFP_data_COC.tail(10))

#Add a new column 'cCHANGE' to the TBS Dataframe that contains the percentage increase in magnitude due to TBS. 
for row_index, row in LFP_data_TBS.iterrows():
    LFP_data_TBS['cCHANGE'] = LFP_data_TBS['POST']/LFP_data_TBS['PRE']*100

# Drop the rows in TBS DataFrame that contain 'NaN' values: LFP_data_TBS_cleaned. 
LFP_data_TBS_cleaned = LFP_data_TBS.dropna(axis=0, how = 'any')
‚ÅÑ
#Add a new column 'cCHANGE' to the Cocaine Dataframe that contains the percentage increase in magnitude due to Cocaine.
for row_index, row in LFP_data_COC.iterrows():
    LFP_data_COC['cCHANGE'] = LFP_data_COC['POST']/LFP_data_COC['PRE']*100

# Drop the rows in Cocaine DataFrame that contain 'NaN' values: LFP_data_COC_cleaned
LFP_data_COC_cleaned = LFP_data_COC.dropna(axis=0, how = 'any')

#print(LFP_data_TBS_cleaned.head(3))
#print(LFP_data_COC_cleaned.head(3))
#print(LFP_data_TBS.info())
#print(LFP_data_TBS_cleaned.info())

# Plot a boxplot for the CLEANED data to observe data points and verify outliers exclusion
# in the 4 pandaSeries: PreTBS, PostTBS, PreCOC, PostCOC
data1 = LFP_data_TBS_cleaned['cPRE'].values.reshape(-1, 1)
data2 = LFP_data_TBS_cleaned['cPOST'].values.reshape(-1, 1)
data3 = LFP_data_COC_cleaned['cPRE'].values.reshape(-1, 1)
data4 = LFP_data_COC_cleaned['cPOST'].values.reshape(-1, 1)
data = [data1, data2, data3, data4]
plt.boxplot(data)
plt.xticks([1, 2, 3, 4], ['cPreTBS', 'cPostTBS', 'cPreCOC', 'cPostCOC'])
plt.ylabel('LFP magnitude (mV)')
plt.xlabel('Plasticity protocol')
plt.show()

# Generate a bargraph for LFP magnitude before (Pre) and after (Post) TBS stimulation for cleaned data
TBS_means = ([np.mean(LFP_data_TBS_cleaned['cPRE']), np.mean(LFP_data_TBS_cleaned['cPOST'])])
TBS_stdevs = ([np.std(LFP_data_TBS_cleaned['cPRE']), np.std(LFP_data_TBS_cleaned['cPOST'])])
index = np.arange(len(TBS_means))
width = 0.5
plt.bar(index, TBS_means, width, yerr= TBS_stdevs)
plt.ylabel('LFP average amplidute (mV)')
plt.title('TBS')
plt.xticks(index, ('PreTBS', 'PostTBS'))
plt.show()

# Generate a bargraph for LFP amplitude before (Pre) and after (Post) cocaine injection
COC_means = ([np.mean(LFP_data_COC_cleaned['cPRE']), np.mean(LFP_data_COC_cleaned['cPRE'])])
COC_stdevs = ([np.std(LFP_data_COC_cleaned['cPOST']), np.std(LFP_data_COC_cleaned['cPOST'])])
index = np.arange(len(COC_means))
width = 0.5
plt.bar(index, COC_means, width, yerr= COC_stdevs)
plt.ylabel('LFP average amplidute (mV)')
plt.title('Cocaine')
plt.xticks(index, ('PreCocaine', 'PostCocaine'))
plt.show()

# Execute a paired t-test to assess changes between pre- and post- for TBS and Cocaine conditions. 
print('paired t-test for TBS = ' + str(stats.ttest_rel(LFP_data_TBS_cleaned['cPRE'], LFP_data_TBS_cleaned['cPOST'])))
print('paired t-test for COCAINE = ' + str(stats.ttest_rel(LFP_data_COC_cleaned['cPRE'], LFP_data_COC_cleaned['cPOST'])))

# Generate a scatterplot with the percentage change in LFP magnitude for TBS, Bridget make sure to use the dataframe: LFP_data_TBS_cleaned, columns 'cPRE' and 'cCHANGE'. 
plt.scatter(LFP_data_TBS_cleaned['cPRE'], LFP_data_TBS_cleaned['cCHANGE'])
plt.title('TBS plasticity')
plt.xlabel('Pre TBS')
plt.ylabel('% change induced by TBS')
plt.show()
  
# Generate a scatterplot with the percentage change in LFP magnitude for Cocaine
plt.scatter(LFP_data_COC_cleaned['cPRE'], LFP_data_COC_cleaned['cCHANGE'])
plt.title('Cocaine plasticity')
plt.xlabel('Pre Cocaine')
plt.ylabel('% change induced by Cocaine')
plt.show()

# From TBS and Cocaine dataframes generate numpy arrays for Pre and Change
PreTBS = LFP_data_TBS_cleaned['cPRE'].values
PreCOC = LFP_data_COC_cleaned['cPRE'].values
ChangeTBS = LFP_data_TBS_cleaned['cCHANGE'].values
ChangeCOC = LFP_data_COC_cleaned['cCHANGE'].values

#reshape the numpy arrays
PreTBS = PreTBS.reshape(-1, 1)
PreCOC = PreCOC.reshape(-1, 1)
ChangeTBS = ChangeTBS.reshape(-1, 1)
ChangeCOC = ChangeCOC.reshape(-1, 1)


#make a regression 
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(LFP_data_TBS_cleaned['cPRE'], LFP_data_TBS_cleaned['cCHANGE'])

#print regression
print('coefficients: ', regressor.coef_)
print('y-axis intercept: ', regressor.intercept_)
print('Regression: % Change =', regressor.coef_,'*Pre-stim response amplitude +', regressor.intercept_)

#plotting regression to fit training data
min_pt = LFP_data_TBS_cleaned['cPRE'].min() * regressor.coef_[0] + regressor.intercept_
max_pt = LFP_data_TBS_cleaned['cPRE'].max() * regressor.coef_[0] + regressor.intercept_
plt.plot([LFP_data_TBS_cleaned['cPRE'].min(), LFP_data_TBS_cleaned['cPRE'].max()], [min_pt, max_pt], label="regression")
##
plt.plot(Pre2_train, Change_train, 'o', label="train data");

#predicting target data
Change_pred_train = regressor.predict(Pre2_train)
#plt.plot(Pre2_train, Change_pred_train, 'o', label="train prediction")

#try test set
Change_pred_test = regressor.predict(Pre2_test)
plt.plot(Pre2_test, Change_test, 'o', label="test data")
#plt.plot(Pre2_test, Change_pred_test, 'o', label="test prediction")


#evaluate preditction quantitatively
R2 = regressor.score(Pre2_test, Change_test)

plt.title("Relationship between LFP amplitude and plasticity")
plt.xlabel("Pre-stim LFP amplitude")
plt.ylabel("Percent change")
plt.legend(loc='best');
plt.show()
print("R squared =", R2)
